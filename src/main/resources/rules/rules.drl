package main;
import javax.swing.*;
import java.util.ArrayList;

global JFrame okno;


declare enum Pytania
    FICTION_TYPE("What type of fiction you'd like?",
        ["Popular fiction",
         "Fiction for kids",
         "Literary fiction",
         "Fiction for kids",
         "Non-fiction",
         "Self-help book"
         ]),

        // Popular fiction branch
        THRILLER("Would you like an intense thriller?",
            ["Yes", "No"]),

        MYSTERY("How about a mystery book?",
            ["Sure", "I'd go for something else"]),

        FAMILY("Maybe you are in mood for a family book?",
            ["Why not?", "Nah"]),

        FAN_HORROR("Then maybe you'd enjoy a fantasy horror book?",
            ["Bring it on", "Better not"]),

        ROM_SUSP_TIME("Romance, time travel or maybe some book that keeps in suspense?",
            ["Romance",
             "Time travel",
             "Suspense"]),

        // Fiction for Kids branch
        AGE("What is the age the book should be suitable for?",
            ["Children below 12",
             "Teen 12-17",
             "Young Adults over 17"]),

        TEEN_TYPE("What is your favourite type of book?",
            ["Historical",
             "Thriller",
             "Fantasy",
             "Relationships",
             "Vampires"]),

        KIDS_TYPE("What type of stories do you like the most?",
            ["Coming of age",
             "Thriller",
             "Peril",
             "Fantasy"]),

        ADULTS_TYPE("What do you prefer?", ["A historical one", "A comedy, please"]),

        // Self-Help branch

        SELF_HELP("Would you like a book about relationships, businesses or maybe inspirational one?",
            ["Relationships",
             "Inspirational",
             "Business"]),

        // Nonfiction

        MEMOIRS("Would you like to read a memoir?", ["Yeah", "I'd go for something else"]),
            MEMO_TYPE("What type of memoir?",
                ["Family",
                 "Humor",
                 "Medical",
                 "Current events",
                 "Self-fulfillment"]),

        FOOD("Maybe fancy reading a story about food?",  ["Why not?", "No"]),

        BUSINESS("Would you like a business book then?", ["Yes", "No"]),

        BIOGRAPHY("What about a biography?", ["Yeah", "Nope"]),

        GRAMMAR("A grammar-related story?", ["Why not?", "I'd go for something else"]);

    tresc: String
    opcje: ArrayList
end;


declare Odpowiedz
    pytanie : Pytania @key
    wybor: String
end


declare Wynik
    odpowiedz: String
end


rule "Odpytywajnik"
when
    q: Pytania();
then
    Object[] opcje = q.getOpcje().toArray();
    int ans = JOptionPane.showOptionDialog(okno, q.getTresc(), "", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcje, 1);

    if(ans != JOptionPane.CLOSED_OPTION) {
        Odpowiedz odpowiedz = new Odpowiedz(q, (String)opcje[ans]);
       	insert(odpowiedz);
    }
end


rule "Odpowiedz"
when
    w: Wynik();
then
    JOptionPane.showMessageDialog(okno, "Books recommended for you: \n" + w.getOdpowiedz());
end


rule "Init"
when
then
    insert(Pytania.FICTION_TYPE);
end

// Pop fiction branch
rule "genre-popfic"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Popular fiction");
then
    insert(Pytania.THRILLER);
end

rule "thriller-yes"
when
    ans: Odpowiedz(pytanie == Pytania.THRILLER, wybor == "Yes");
then
    insert(new Wynik
        ("Before I Go To Sleep by S.J. Watson \n" +
         "Nineteen Minutes by Jodi Picoult\n" +
         "The Girl with the Dragon Tatoo by Stieg Larsson"));
end


rule "thriller-no"
when
    ans: Odpowiedz(pytanie == Pytania.THRILLER, wybor == "No");
then
    insert(Pytania.MYSTERY);
end


rule "mystery-yes"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY, wybor == "Sure");
then
    insert(new Wynik
        ("The Lovely Bones by Alice Sebold\n" +
         "The Thirteenth Tale by Diane Setterfield"));
end


rule "mystery-no"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY, wybor == "I'd go for something else");
then
    insert(Pytania.FAMILY);
end


rule "family-yes"
when
    ans: Odpowiedz(pytanie == Pytania.FAMILY, wybor == "Why not?")
then
    insert(new Wynik
        ("Room by Emma Donghue\n" +
         "My Sister's Keeper by Jodi Picoult\n" +
         "The Memory Keeper's Daughter by Kim Edwards\n" +
         "The Language of Flowers by Vanessa Diffenbaugh"));
end


rule "family-no"
when
    ans: Odpowiedz(pytanie == Pytania.FAMILY, wybor == "Nah");
then
    insert(Pytania.FAN_HORROR);
end


rule "fanhorror-yes"
when
    ans: Odpowiedz(pytanie == Pytania.FAN_HORROR, wybor == "Bring it on");
then
    insert(new Wynik("The Historian by Elizabeth Kostova"));
end


rule "fanhorror-nope"
when
    ans: Odpowiedz(pytanie == Pytania.FAN_HORROR, wybor == "Better not");
then
    insert(Pytania.ROM_SUSP_TIME);
end

rule "RST-Romance"
when
    ans: Odpowiedz(pytanie == Pytania.ROM_SUSP_TIME, wybor == "Romance");
then
    insert(new Wynik(
        "The Other Boleyn Girl by Philippa Gregory\n" +
        "Snow Flower and the Secret Fan by Lisa See"));
end


rule "RST-Time travel"
when
    ans: Odpowiedz(pytanie == Pytania.ROM_SUSP_TIME, wybor == "Time travel");
then
    insert(new Wynik
        ("The Time Traveller's Wife by Audrey Niffenegger\n" +
         "11/22/63 by Stephen King"));
end


rule "RST-Suspense"
when
    ans: Odpowiedz(pytanie == Pytania.ROM_SUSP_TIME, wybor == "Suspense");
then
    insert(new Wynik
        ("Gone Girl by Gillian Flynn\n" +
         "The Da Vinci Code by Dan Brown\n" +
         "Joyland by Stephen King"));
end


// Fiction for kids branch
rule "genre-kidfic"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Fiction for kids");
then
    insert(Pytania.AGE);
end


rule "age-kid"
when
    ans: Odpowiedz(pytanie == Pytania.AGE, wybor == "Children below 12");
then
    insert(Pytania.KIDS_TYPE);
end


rule "age-teen"
when
    ans: Odpowiedz(pytanie == Pytania.AGE, wybor == "Teen 12-17");
then
    insert(Pytania.TEEN_TYPE);
end


rule "age-youngadult"
when
    ans: Odpowiedz(pytanie == Pytania.AGE, wybor == "Young Adults over 17");
then
    insert(Pytania.ADULTS_TYPE);
end


rule "kid-coming of age"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Coming of age");
then
    insert(new Wynik("Wonder by R.J. Palacio"));
end


rule "kid-thriller"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Thriller");
then
    insert(new Wynik("The Lightning Thief by Rick Riordan"));
end


rule "kid-peril"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Peril");
then
    insert(new Wynik("A Series of Unfortunate Events: The End by Lemony Snicket"));
end


rule "kid-fantasy"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Fantasy");
then
    insert(new Wynik
        ("Harry Potter and the Deathly Hallows by J.K. Rowling\n" +
         "Coraline by Neil Gaiman\n" +
         "The Graveyard Book by Neil Gaiman"));
end


rule "teen-historical"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Historical");
then
    insert(new Wynik("Clockwork Angel by Cassandra Clare"));
end


rule "teen-thriller"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Thriller");
then
    insert(new Wynik("The Hunger Games by Suzanne Collins"));
end


rule "teen-fantasy"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Fantasy");
then
    insert(new Wynik
        ("Eragon by Christopher Paolini\n" +
         "Insurgent by Veronica Roth\n" +
         "City of Bones by Cassandra Clare"));
end


rule "teen-relationships"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Relationships");
then
    insert(new Wynik
        ("The Fault in Our Stars by John Green\n" +
         "Looking for Alaska by John Green"));
end


rule "teen-vampires" // XD
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Vampires");
then
    insert(new Wynik
        ("Twillight by Stephenie Meyer\n" +
         "Vampire Academy by Richelle Mead"));
end


rule "adults-historical"
when
    ans: Odpowiedz(pytanie == Pytania.ADULTS_TYPE, wybor == "A historical one");
then
    insert(new Wynik("Diary of a Wimpy Kid by Jeff Kinney"));
end


rule "adults-comedy"
when
    ans: Odpowiedz(pytanie == Pytania.ADULTS_TYPE, wybor == "A comedy, please");
then
    insert(new Wynik("The Book Thief by Markus Zusak"));
end


// Self help branch
rule "genre-self help"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Self-help book");
then
    insert(Pytania.SELF_HELP);
end


rule "self-help-relationships"
when
    ans: Odpowiedz(pytanie == Pytania.SELF_HELP, wybor == "Relationships");
then
    insert(new Wynik
        ("Quiet: The Power of Introverts in a World that Can't Stop Talking by Susan Cain"));
end


rule "self-help-inspirational"
when
    ans: Odpowiedz(pytanie == Pytania.SELF_HELP, wybor == "Inspirational");
then
    insert(new Wynik
        ("The Five People you Meet in Heaven by Mitch Albom\n" +
         "Daring Greatly: How the Courage to Be Vurnelable Transforms the Way We Live," +
         "Love, Parent and Lead by Brene Brown"));
end


rule "self-help-business"
when
    ans: Odpowiedz(pytanie == Pytania.SELF_HELP, wybor == "Business");
then
    insert(new Wynik
        ("The Five Dysfunctions of a Team by Patrick Lencioni\n" +
         "Strengths Finder 2.0 by Tom Rath\n" +
         "Lean In by Sheryl Sandberg\n" +
         "Good to Great by Jim Collins\n" +
         "The Power of Habit: Why We Do What We Do in Life and Business by Charles Duhigg"));
end